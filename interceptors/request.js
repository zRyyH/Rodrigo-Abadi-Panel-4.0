// Importa a funÃ§Ã£o tokenStorage do arquivo tokenStorage.js localizado na pasta utils
// Esta funÃ§Ã£o Ã© responsÃ¡vel por gerenciar os tokens de autenticaÃ§Ã£o
import { tokenStorage } from '@/utils/tokenStorage';

// Exporta a funÃ§Ã£o requestInterceptor que serÃ¡ usada como interceptador de requisiÃ§Ãµes HTTP
// O parÃ¢metro 'config' contÃ©m todas as configuraÃ§Ãµes da requisiÃ§Ã£o (URL, mÃ©todo, headers, etc.)
export const requestInterceptor = (config) => {
    // Chama o mÃ©todo getAccessToken() do tokenStorage para recuperar o token de acesso armazenado
    // Este token Ã© normalmente salvo apÃ³s o usuÃ¡rio fazer login
    const token = tokenStorage.getAccessToken();

    // Verifica se o token existe (nÃ£o Ã© null, undefined ou string vazia)
    if (token) {
        // Adiciona o token ao header 'Authorization' da requisiÃ§Ã£o no formato Bearer
        // O padrÃ£o Bearer Ã© amplamente usado para autenticaÃ§Ã£o baseada em tokens
        config.headers.Authorization = `Bearer ${token}`;
    }

    // Verifica se a aplicaÃ§Ã£o estÃ¡ rodando em ambiente de desenvolvimento
    // process.env.NODE_ENV Ã© uma variÃ¡vel de ambiente que indica o modo atual
    if (process.env.NODE_ENV === 'development') {
        // Loga no console o mÃ©todo HTTP (GET, POST, etc.) em maiÃºsculas e a URL da requisiÃ§Ã£o
        // O emoji ðŸ“¡ facilita a visualizaÃ§Ã£o dos logs de requisiÃ§Ãµes durante o debug
        console.log(`ðŸ“¡ ${config.method.toUpperCase()} ${config.url}`);
    }
    // Retorna o objeto config modificado para que a requisiÃ§Ã£o possa prosseguir
    // Este retorno Ã© essencial para o interceptador funcionar corretamente
    return config;
};

// Exporta a funÃ§Ã£o requestErrorInterceptor para tratar erros que ocorrem antes da requisiÃ§Ã£o ser enviada
// O parÃ¢metro 'error' contÃ©m as informaÃ§Ãµes do erro ocorrido
export const requestErrorInterceptor = (error) => {
    // Retorna uma Promise rejeitada com o erro recebido
    // Isso permite que o erro seja capturado por blocos catch() ou tratadores de erro subsequentes
    return Promise.reject(error);
};